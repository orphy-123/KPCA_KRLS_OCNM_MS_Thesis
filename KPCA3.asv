% Online KPCA %

X1 = P(1:400,:);
%X = P;
[T1 F1] = size(X1);
X1 = X1 - repmat( mean(X1,1) , size(X1,1) , 1 ); %Then subtract mean of each dimension across all timesteps.
X1_mean = mean(X1,1); %Store mean value of X_train for each dimension(col)

% Determine Kernel matrix %
for i=1:T1
    for j=1:T1
        K1(i,j) = kernel(X1(i,:), X1(j,:));
    end
end


% Find eigenvectors and sort in descending order %
[A1 D1] = eig(K1);
lambda1 = diag(D1);
lambda1(find(lambda1<=0))=eps;
lambda1 = flipud(lambda1);
D1 = diag(lambda1);
A1 = fliplr(A1);

% Normalize eigenvectors to 1/eigenvalue %
A1_norm = A1./sqrt(repmat(lambda1',T1,1)); %Cols of A_norm are the (normalized) eigenvectors
%To check: sum(A_norm.^2).*lambda' must = 1


X1_hat = A1_norm'*K1;
X1_hat = X1_hat'; %Rows are flow vectors for each timestep, cols are projections onto each eigenvector

normSquare1 = sum(X1_hat.^2);
var1 = normSquare1/sum(normSquare1); %Percentage of variances explained by each eigenvector

r = 10;
X1_state = A1_norm(:,1:r)'*K1;
X1_state = X1_state';
X1_tilde = A1_norm(:,r+1:end)'*K1;
X1_tilde = X1_tilde';
X1_residual = sum(X1_tilde.^2,2);

%%%%%%%%% Test Phase %%%%%%%%%%

X2 = P(401:end,:);
%X = P;
[T2 F2] = size(X2);
% IMPORTANT: Subtract mean of each dimension of X_train from X_test;
%Must do this approximation as mean of X_test cannot be known ahead of time
%in a real-time application
X2 = X2 - repmat( X1_mean , size(X2,1) , 1 );

for j=1:T2
    
    x = X2(j,:); %Arriving input vector

    for i=1:T1
        k(i,1) = kernel(X1(i,:), x); %Determine kernel of arriving input vector with training pts
    end
    
    X2_state = A1_norm(:,1:r)'*k; %Project on to eigenvectors obtained from the training set
    X2_state = X2_state';
    X2_tilde = A1_norm(:,r+1:end)'*k;
    X2_tilde = X2_tilde';
    X2_residual(j) = sum(X2_tilde.^2,2);   
    
end

% Determine Kernel matrix %
for i=1:T1
    for j=1:T2
        K2(i,j) = kernel(X1(i,:), X2(j,:));
    end
end

X2_hat = A1_norm'*K2;
X2_hat = X2_hat'; %Rows are flow vectors for each timestep, cols are projections onto each eigenvector


X2_state = A1_norm(:,1:r)'*K2;
X2_state = X2_state';
X2_tilde = A1_norm(:,r+1:end)'*K2;
X2_tilde = X2_tilde';
X2_residual = sum(X2_tilde.^2,2);
